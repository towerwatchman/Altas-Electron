name: Atlas Nightly Build
on:
  push:
    branches: [ "staging" ]
  pull_request:
    branches: [ "staging" ]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Needed for git operations

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Linux build dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y build-essential libudev-dev

    - name: Clear npm cache directory (Windows)
      if: matrix.os == 'windows-latest'
      run: powershell -Command "Remove-Item -Path 'C:\npm\cache' -Recurse -Force -ErrorAction SilentlyContinue"

    - name: Clear npm cache directory (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: rm -rf ~/.npm

    - name: Clear npm cache (Windows)
      if: matrix.os == 'windows-latest'
      timeout-minutes: 10
      run: powershell -Command "npm cache clean --force --verbose || npm cache clean --force --verbose || npm cache clean --force --verbose"

    - name: Clear npm cache (Linux)
      if: matrix.os == 'ubuntu-latest'
      timeout-minutes: 10
      run: npm cache clean --force --verbose || npm cache clean --force --verbose || npm cache clean --force --verbose

    - name: Clear temporary directories
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          powershell -Command "Remove-Item -Path 'D:\a\Altas-Electron\Altas-Electron\node_modules' -Recurse -Force -ErrorAction SilentlyContinue"
        else
          rm -rf ./node_modules
        fi

    - name: Install electron
      timeout-minutes: 20
      run: |
        npm install electron@38.0.0 --verbose || npm install electron@38.0.0 --verbose || npm install electron@38.0.0 --verbose
      env:
        ELECTRON_VERSION: 38.0.0

    - name: Install dependencies
      timeout-minutes: 30
      run: |
        npm ci --verbose || npm ci --verbose || npm ci --verbose
      env:
        ELECTRON_VERSION: 38.0.0

    - name: Rebuild native dependencies for Electron
      run: npx @electron/rebuild --version=38.0.0 --verbose
      env:
        ELECTRON_VERSION: 38.0.0

    - name: Build CSS
      run: npm run build:css

    - name: Build for ${{ matrix.os }}
      id: build
      run: npm run build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Bump patch version (1.0.x)
      if: success()
      id: package_version
      run: |
        git config user.name "towerwatchman"
        git config user.email "towerwatchman@users.noreply.github.com"
        npm version patch -m "Bump patch version to %s for nightly build"
        echo "newVersion=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        git push
        git push --tags

    - name: Zip build artifacts
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          powershell -Command "Compress-Archive -Path ./dist/* -DestinationPath ${{ github.workspace }}/Atlas_${{ steps.package_version.outputs.newVersion }}_windows.zip"
        else
          zip -r ${{ github.workspace }}/Atlas_${{ steps.package_version.outputs.newVersion }}_linux.zip ./dist/*
        fi

    - name: Create pre-release
      id: create_release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.package_version.outputs.newVersion }}
        name: Nightly v${{ steps.package_version.outputs.newVersion }}
        body: Nightly build of v${{ steps.package_version.outputs.newVersion }}
        draft: false
        prerelease: true
        fail_on_unmatched_files: true
        generate_release_notes: true

    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/Atlas_${{ steps.package_version.outputs.newVersion }}_${{ matrix.os == 'windows-latest' && 'windows' || 'linux' }}.zip
        asset_name: Atlas_${{ steps.package_version.outputs.newVersion }}_${{ matrix.os == 'windows-latest' && 'windows' || 'linux' }}.zip
        asset_content_type: application/zip