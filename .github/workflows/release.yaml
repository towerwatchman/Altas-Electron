name: Atlas Release Build
on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Linux build dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y build-essential libudev-dev

    - name: Clear npm cache
      run: npm cache clean --force

    - name: Clear temporary directories
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          powershell -Command "Remove-Item -Path 'D:\a\Altas-Electron\Altas-Electron\node_modules' -Recurse -Force -ErrorAction SilentlyContinue"
        else
          rm -rf ./node_modules
        fi

    - name: Install electron
      timeout-minutes: 20
      run: |
        npm install electron@38.0.0 --verbose || npm install electron@38.0.0 --verbose || npm install electron@38.0.0 --verbose
      env:
        ELECTRON_VERSION: 38.0.0

    - name: Install dependencies
      timeout-minutes: 30
      run: |
        npm ci --verbose || npm ci --verbose || npm ci --verbose
      env:
        ELECTRON_VERSION: 38.0.0

    - name: Rebuild native dependencies for Electron
      run: npx @electron/rebuild --version=38.0.0 --verbose
      env:
        ELECTRON_VERSION: 38.0.0

    - name: Validate tag version (vX.Y.0, Y <= 9)
      id: get_version
      uses: actions/github-script@v6
      with:
        result-encoding: string
        script: |
          const tag = context.ref.replace('refs/tags/v', '');
          const versionRegex = /^[0-9]+\.[0-9]\.0$/;
          const minorVersion = parseInt(tag.split('.')[1], 10);
          if (!versionRegex.test(tag) || minorVersion > 9) {
            core.setFailed('Invalid tag format or minor version > 9. Expected vX.Y.0 (Y <= 9).');
            return;
          }
          return tag;

    - name: Build CSS
      run: npm run build:css

    - name: Build for ${{ matrix.os }}
      run: npm run build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Zip build artifacts
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          powershell Compress-Archive -Path ./dist/* -DestinationPath ${{ github.workspace }}/Atlas_${{ steps.get_version.outputs.result }}_windows.zip
        else
          zip -r ${{ github.workspace }}/Atlas_${{ steps.get_version.outputs.result }}_linux.zip ./dist/*
        fi

    - name: Create release
      id: create_release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/Atlas_${{ steps.get_version.outputs.result }}_${{ matrix.os == 'windows-latest' && 'windows' || 'linux' }}.zip
        asset_name: Atlas_${{ steps.get_version.outputs.result }}_${{ matrix.os == 'windows-latest' && 'windows' || 'linux' }}.zip
        asset_content_type: application/zip